task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

configurations {
    asciidoclet
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        
		dependencies {
			classpath "eu.mihosoft.vrl.vlicense-header-util:VLicenseHeaderUtil:0.1-r2-SNAPSHOT"
			classpath "eu.mihosoft.vrl.vlicense-header-util.gradle:vlicense-header-plugin:0.1-r2-SNAPSHOT"
		}
	}
}

repositories {
	mavenLocal()
    mavenCentral()
	maven { 
		url 'https://oss.sonatype.org/content/repositories/snapshots/' 
	}
	maven { 
		url "http://oss.sonatype.org/content/repositories/releases/" 
	}
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'idea'

dependencies {
    testCompile 'junit:junit:4.10'
	testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.loadui:testFx:3.1.2'
	asciidoclet 'org.asciidoctor:asciidoclet:0.+'
}

// apply vrl license header plugin
if (!project.plugins.findPlugin(eu.mihosoft.vrl.vlicenseheaderutil.gradle.VLicenseHeaderPlugin)) {
    project.apply(plugin: eu.mihosoft.vrl.vlicenseheaderutil.gradle.VLicenseHeaderPlugin)
}

// license template (will be used as header in all Java source files)
repairHeaders.licenseHeaderText = new File(projectDir,"license-template.txt")

javadoc {
    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.doclet = 'org.asciidoctor.Asciidoclet'
}


// Needed until Gradle supports class-scanning for Java 8
tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class"
    include "**/*Test1.class"
}

test {
  // the ANT plugin Gradle is using runs any class ending on *Test as a test
  exclude 'jfxtras/labs/test/JFXtrasGuiTest.class'
}

apply {
    from 'gradle/mavenCentralDeploy.gradle'
}

signArchives.onlyIf {
    project.hasProperty('signing.keyId')
}

uploadArchives.onlyIf {
    project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
}

task copyToLib(type: Copy) {
    into "_lib"
    from configurations.testCompile
}
