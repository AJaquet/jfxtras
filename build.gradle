task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven'	
	apply plugin: 'signing'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	
	repositories {
		mavenLocal()
		mavenCentral()
		maven { 
			url 'https://oss.sonatype.org/content/repositories/snapshots/' 
		}
		maven { 
			url "http://oss.sonatype.org/content/repositories/releases/" 
		}
	}

	signing {
		sign configurations.archives
	}
        
    signArchives.onlyIf {
		project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
	}

	uploadArchives.onlyIf {
		project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
	}

	uploadArchives {
		if (!project.hasProperty('sonatypeUsername') || !project.hasProperty('sonatypePassword'))
			  return

		repositories.mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			pom.project {
				artifactId   "jfxtras-${project.name}"
				name         "JFXtras ${project.name}"
				url          'http://jfxtras.org'
				description  'Miscellaneous components for JavaFX 2'
				packaging    'jar'
				licenses {
					license {
						name 'BSD'
						url 'http://www.opensource.org/licenses/bsd-license.php'
						distribution 'repo'
					}
				}
				scm {
					url 'scm:git@github.com:jfxtras/jfxtras.git'
					connection 'scm:git@github.com:jfxtras/jfxtras.git'
					developerConnection 'scm:git@github.com:jfxtras/jfxtras.git'
				}
				developers {
					developer { name 'Tom Eugelink' }
				}
			}
		}
	}
}


subprojects {
	// all projects must be compatible with the java version specified here
	sourceCompatibility = '1.8'
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	// Needed until Gradle supports class-scanning for Java 8
	tasks.withType(Test) {
		scanForTestClasses = false
		include "**/*Test.class"
		include "**/*Test1.class"
		exclude 'jfxtras/labs/test/JFXtrasGuiTest.class'
	}
	
	// prepend every artifactId with 'jfxtras-'
	configure(install.repositories.mavenInstaller) {
		pom.project {
			artifactId "jfxtras-${project.name}"
		}
	}
	
	configurations {
		asciidoclet
	}
	
	dependencies {
		asciidoclet 'org.asciidoctor:asciidoclet:0.+'
	}
	
	javadoc {
		options.docletpath = configurations.asciidoclet.files.asType(List)
		options.doclet = 'org.asciidoctor.Asciidoclet'
	}

	task docJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from 'build/docs/javadoc'
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.allSource
		classifier = 'sources'
	}

	artifacts {
		archives jar
		archives docJar
		archives sourcesJar
	}
}

project(':') {
	artifacts {
		archives jar
	}
}

project(':agenda') {
	dependencies {
		compile project(':controls')
		testCompile project(':test-support')
	}
}

project(':common') {
	dependencies {
		testCompile project(':test-support')
	}
}

project(':controls') {
	dependencies {
		compile project(':common')
		compile project(':fxml')
		testCompile project(':test-support')
	}
}

project(':test-support') {
	dependencies {
		compile 'junit:junit:4.10'
		compile 'org.mockito:mockito-all:1.9.5'
		compile 'org.loadui:testFx:3.1.2'
	}
}

task uberJar(type: Jar, dependsOn: subprojects.jar) {    
    subprojects.each {
        proj -> from {
			if (proj.name != 'test-support') {
				println("Merging into uberJar: ${proj.jar.archivePath}")
				zipTree(proj.jar.archivePath) 
			}
        }
    }
}

// TODO: _lib folder per project?
task copyToLib(type: Copy) {
    into "_lib"
    from project(':test-support').configurations.testCompile
}